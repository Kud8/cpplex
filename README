Introduction
============

At the very current status the project is composed by two chunks:

    *   PILAL   (Pathetically Inadequate Linear Algebra Library)
    *   Simplex (The real simplex algorithm implementation)

Simplex depends on PILAL and they are linked statically, soon or later they will
become libraries but I need to work more on the Makefile and this is not a prio-
rity. I would like to add some more optimization to PILAL: 

    *   Matrix shape detection (triangular, diagonal, identity, ...)
    *   Optimization of procedures based on shape detection

The simplex algorithm implementation is working but I want to add some optimiza-
tion to it as well:

    *   Strategies for upper and lower limitation of variables
    *   Branch-and-bound for integer linear programming
	*	Multi-threading

Basically, anything that can improve the performances is well accepted.

How to use it
=============

All you have to do to compile the classes and the test is:

    make
    
If you want to clean up all the dependencies files and object files just type:

    make wipe
    
The Makefile is quite flexible so anything you will write in a .cc file under 
the src/ directory tree will be compiled to bin/. The lib/ directory was used
before to compile the dynamic libraries, and will be used again soon or later
for the same job. To execute the solver with a problem file (look for some
example problems in the problems/ directory) run:

    ./bin/solver problems/<name_of_the_problem>
    
If the problem file is small.problem, the <name_of_the_problem> will be small
(don't specify the extension). If you want to keep solving a problem while
still modifying the .problem file run:

    ./bin/repeat_solver problems/<name_of_the_problem>

which is a Perl script. Problems have a quite straightforward structure, so
learning by example is probably ok.

License
=======

See LICENSE file.

Drop a line
===========

If you use this code for your software, please let me know with a mail
message at tunnuz@gmail.com, or not.
